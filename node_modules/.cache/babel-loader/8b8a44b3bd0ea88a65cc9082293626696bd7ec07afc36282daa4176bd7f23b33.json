{"ast":null,"code":"import { getDatabase, ref, set, push, update, remove, onValue, orderByChild, equalTo } from \"firebase/database\";\nconst db = getDatabase();\n\n// Función para leer datos de un nodo\nexport const readData = path => {\n  const dataRef = ref(db, path);\n  return new Promise((resolve, reject) => {\n    onValue(dataRef, snapshot => {\n      const data = snapshot.val();\n      resolve(data);\n    }, error => {\n      reject(error);\n    });\n  });\n};\n\n// Función para leer datos de un nodo por field\nexport const readDataField = (path, field, value) => {\n  const dataRef = ref(db, path);\n  console.log(dataRef);\n  let queryRef;\n  if (field && value) {\n    queryRef = orderByChild(dataRef, field);\n    queryRef = equalTo(queryRef, value);\n  } else {\n    queryRef = dataRef;\n  }\n  queryRef = dataRef;\n  return new Promise((resolve, reject) => {\n    onValue(queryRef, snapshot => {\n      const data = snapshot.val();\n      resolve(data);\n    }, error => {\n      reject(error);\n    });\n  });\n};\n\n// Función para escribir datos en un nodo\nexport const writeData = (path, data) => {\n  const dataRef = ref(db, path);\n  return new Promise((resolve, reject) => {\n    set(dataRef, data).then(() => {\n      resolve();\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\n\n// Función para agregar datos a un nodo utilizando una clave generada automáticamente\nexport const addData = (path, data) => {\n  const dataRef = ref(db, path);\n  return new Promise((resolve, reject) => {\n    const newDataRef = push(dataRef);\n    set(newDataRef, data).then(() => {\n      resolve();\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\n\n// Función para actualizar datos en un nodo\nexport const updateData = (path, data) => {\n  const dataRef = ref(db, path);\n  return new Promise((resolve, reject) => {\n    update(dataRef, data).then(() => {\n      resolve();\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\n\n// Función para eliminar un nodo\nexport const deleteData = path => {\n  const dataRef = ref(db, path);\n  return new Promise((resolve, reject) => {\n    remove(dataRef).then(() => {\n      resolve();\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};","map":{"version":3,"names":["getDatabase","ref","set","push","update","remove","onValue","orderByChild","equalTo","db","readData","path","dataRef","Promise","resolve","reject","snapshot","data","val","error","readDataField","field","value","console","log","queryRef","writeData","then","catch","addData","newDataRef","updateData","deleteData"],"sources":["C:/Users/Beto HJ/Documents/Trapape/react/trapape/src/utils/firebaseService.js"],"sourcesContent":["import { getDatabase, ref, set, push, update, remove, onValue, orderByChild, equalTo } from \"firebase/database\";\r\n\r\nconst db = getDatabase();\r\n\r\n// Función para leer datos de un nodo\r\nexport const readData = (path) => {\r\n  const dataRef = ref(db, path);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    onValue(dataRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      resolve(data);\r\n    }, (error) => {\r\n      reject(error);\r\n    });\r\n  });\r\n};\r\n\r\n// Función para leer datos de un nodo por field\r\nexport const readDataField = (path, field, value) => {\r\n    const dataRef = ref(db, path);\r\n\r\n    console.log(dataRef);\r\n\r\n    let queryRef;\r\n    if (field && value) {\r\n      queryRef = orderByChild(dataRef, field);\r\n      queryRef = equalTo(queryRef, value);\r\n    } else {\r\n      queryRef = dataRef;\r\n    }\r\n\r\n    queryRef = dataRef;\r\n    return new Promise((resolve, reject) => {\r\n      onValue(queryRef, (snapshot) => {\r\n        const data = snapshot.val();\r\n        resolve(data);\r\n      }, (error) => {\r\n        reject(error);\r\n      });\r\n    });\r\n  };\r\n\r\n// Función para escribir datos en un nodo\r\nexport const writeData = (path, data) => {\r\n  const dataRef = ref(db, path);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    set(dataRef, data)\r\n      .then(() => {\r\n        resolve();\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n\r\n// Función para agregar datos a un nodo utilizando una clave generada automáticamente\r\nexport const addData = (path, data) => {\r\n  const dataRef = ref(db, path);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const newDataRef = push(dataRef);\r\n    set(newDataRef, data)\r\n      .then(() => {\r\n        resolve();\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n\r\n// Función para actualizar datos en un nodo\r\nexport const updateData = (path, data) => {\r\n  const dataRef = ref(db, path);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    update(dataRef, data)\r\n      .then(() => {\r\n        resolve();\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n\r\n// Función para eliminar un nodo\r\nexport const deleteData = (path) => {\r\n  const dataRef = ref(db, path);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    remove(dataRef)\r\n      .then(() => {\r\n        resolve();\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}