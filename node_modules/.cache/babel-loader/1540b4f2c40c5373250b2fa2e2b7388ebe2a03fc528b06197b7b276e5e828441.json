{"ast":null,"code":"import { getDatabase, ref, set, push, update, remove, onValue, orderByChild, equalTo, query } from \"firebase/database\";\nconst db = getDatabase();\n\n// Función para leer datos de un nodo\nexport const readData = path => {\n  const dataRef = ref(db, path);\n  return new Promise((resolve, reject) => {\n    onValue(dataRef, snapshot => {\n      const data = snapshot.val();\n      resolve(data);\n    }, error => {\n      reject(error);\n    });\n  });\n};\n\n// Función para leer datos de un nodo por field\nexport const readDataField = (path, field, value) => {\n  const dataRef = query(ref(db, path), orderByChild(field), equalTo(value));\n  console.log(dataRef);\n  //const queryRef = orderByChild(dataRef, \"userConsig\");\n  //const filteredRef = equalTo(queryRef, value);\n\n  return new Promise((resolve, reject) => {\n    onValue(dataRef, snapshot => {\n      const data = snapshot.val();\n      resolve(data);\n    }, error => {\n      reject(error);\n    });\n  });\n};\n\n// Función para escribir datos en un nodo\nexport const writeData = (path, data) => {\n  const dataRef = ref(db, path);\n  return new Promise((resolve, reject) => {\n    set(dataRef, data).then(() => {\n      resolve();\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\n\n// Función para agregar datos a un nodo utilizando una clave generada automáticamente\nexport const addData = (path, data) => {\n  const dataRef = ref(db, path);\n  return new Promise((resolve, reject) => {\n    const newDataRef = push(dataRef);\n    set(newDataRef, data).then(() => {\n      resolve();\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\n\n// Función para actualizar datos en un nodo\nexport const updateData = (path, data) => {\n  const dataRef = ref(db, path);\n  return new Promise((resolve, reject) => {\n    update(dataRef, data).then(() => {\n      resolve();\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\n\n// Función para eliminar un nodo\nexport const deleteData = path => {\n  const dataRef = ref(db, path);\n  return new Promise((resolve, reject) => {\n    remove(dataRef).then(() => {\n      resolve();\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};","map":{"version":3,"names":["getDatabase","ref","set","push","update","remove","onValue","orderByChild","equalTo","query","db","readData","path","dataRef","Promise","resolve","reject","snapshot","data","val","error","readDataField","field","value","console","log","writeData","then","catch","addData","newDataRef","updateData","deleteData"],"sources":["C:/Users/Beto HJ/Documents/Trapape/react/trapape/src/utils/firebaseService.js"],"sourcesContent":["import { getDatabase, ref, set, push, update, remove, onValue, orderByChild, equalTo, query } from \"firebase/database\";\r\n\r\nconst db = getDatabase();\r\n\r\n// Función para leer datos de un nodo\r\nexport const readData = (path) => {\r\n  const dataRef = ref(db, path);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    onValue(dataRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      resolve(data);\r\n    }, (error) => {\r\n      reject(error);\r\n    });\r\n  });\r\n};\r\n\r\n// Función para leer datos de un nodo por field\r\nexport const readDataField = (path, field, value) => {\r\n    const dataRef = query(ref(db, path), orderByChild(field), equalTo(value)\t);\r\n    console.log(dataRef);\r\n    //const queryRef = orderByChild(dataRef, \"userConsig\");\r\n    //const filteredRef = equalTo(queryRef, value);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      onValue(dataRef, (snapshot) => {\r\n        const data = snapshot.val();\r\n        resolve(data);\r\n      }, (error) => {\r\n        reject(error);\r\n      });\r\n    });\r\n  };\r\n\r\n// Función para escribir datos en un nodo\r\nexport const writeData = (path, data) => {\r\n  const dataRef = ref(db, path);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    set(dataRef, data)\r\n      .then(() => {\r\n        resolve();\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n\r\n// Función para agregar datos a un nodo utilizando una clave generada automáticamente\r\nexport const addData = (path, data) => {\r\n  const dataRef = ref(db, path);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const newDataRef = push(dataRef);\r\n    set(newDataRef, data)\r\n      .then(() => {\r\n        resolve();\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n\r\n// Función para actualizar datos en un nodo\r\nexport const updateData = (path, data) => {\r\n  const dataRef = ref(db, path);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    update(dataRef, data)\r\n      .then(() => {\r\n        resolve();\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n\r\n// Función para eliminar un nodo\r\nexport const deleteData = (path) => {\r\n  const dataRef = ref(db, path);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    remove(dataRef)\r\n      .then(() => {\r\n        resolve();\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}